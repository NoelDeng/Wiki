面向对象

主要思想

分而治之 --- 讲一个大的需求分解为许多类，每个类处理一个独立的模块。
			拆分好处：独立模块便于分工，每个模块便于服用，可拓展性强。（每一个类处理的职责，只有可能因为一个原因发生变化）
			例子：敌人的多种攻击方式--是否会发生变化，将每一种攻击方式做成一个类。敌人对象要用的时候调用它。行为不同要分类，数据不同行为相同归为一个类

封装变化 -- 变化的地方独立封装，避免影响其他模块。


高内聚 --   类中各个方法都在完成一项任务（单一职责的类）
			复制的实现封装在内部，对外提供简单的调用。


低耦合 --   类与类的关联性依赖度要低（每个类独立）
			让一个模块的改变尽少影响其他模块。


优势
高复用性、高拓展性、高维护性、高移植性




三大特点

封装
	定义：
	数据角度讲，将一些基本数据类型复合成一个自定义类型。
	方法角度讲，向类外提供功能，隐藏实现的细节。
	设计角度讲，分而治之，高内聚低耦合，封装变化。

	作用：
	1.松散耦合，降低程序各部分之间的依赖性。
	2.简化编程，使用者不必了解具体实现细节，只需要调用对外提供的功能。
	3.增加安全性，以特定的访问权限来使用类的成员，保护成员不被意外修改。

	访问修饰符：
	private：私有的，类别成员默认级别，仅在类内部可见。
	internal：内部的，类默认级别，仅在程序集内可见。
	protected：受保护的，类内部与派生类中可见
	protected internal：意为internal或protected，程序集内部或派生类可见。
	public：公有的，类内外都可见。

继承：
	抽象类
	语法：
	用abstract修饰类即为抽象类
	抽象类中可能包含抽象成员（方法，属性）
	抽象类不能创建对象
	语义：
	标识一个概念的抽象
	只标识做什么， 拥有什么数据，但往往不表达具体以做法。
	适用性：
	1.当有行为，但是不需要实现的时候。
	2.当有一些行为，在做法上有多种可能时，但又不需要客户了解具体做法。
	3.不希望类创建对象时。
	抽象类与普通类的区别：
	相同：都可以有静态，实例成员（字段，属性，方法，构造函数）
	不同：抽象类使用abstract修饰，可能又抽象方法，不能直接创建对象。

	抽象方法
	语法：
	用sbatract修饰并且没有实现的方法，只有方法的生命，没有实现。
	抽象方法只能出现在抽象类中。
	抽象方法在本人男类中不实现，实现推迟到子类中，子类必须重写override实现。
	语义：
	描述做生命，不描述怎么做。
	一个行为的抽象。










总结：
	使用C#语言表达抽象的语义
	抽象类：一个概念的抽象（普通成员，抽象成员）
	接口：一组行为的抽象（多种抽象成员）
	委托：一类行为的抽象（同一种类别多个方法）

	